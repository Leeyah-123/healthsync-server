// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(cuid()) @db.VarChar()
  firstName            String   @map("first_name") @db.VarChar()
  lastName             String   @map("last_name") @db.VarChar()
  email                String   @unique @db.VarChar(255)
  password             String   @db.VarChar()
  gender               Gender
  username             String?  @unique @db.VarChar()
  createdAt            DateTime @default(now()) @map("created_at")
  role                 Role     @default(user)
  // user's current height in metres
  height               Int?
  // user's current weight in kilograms
  currentWeight        Float?   @map("current_weight")
  // date to weight json object
  weightHistory        Json?    @map("weight_history")
  // user's current calorie intake in k/cal
  currentCalorieIntake Float?   @map("current_calorie_intake")
  // date to calorie intake json object
  calorieIntakeHistory Json?    @map("calorie_intake_history")
  // whether or not a user has been suspended by a forum moderator
  suspended            Boolean  @default(false)
  // ID of moderator who has most recently suspended this user. Kept for accountability purposes
  suspendedBy          String?

  // relations
  notifications Notification[]
  workoutPlans  WorkoutPlan[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  Routine       WorkoutRoutine[]

  @@index([id, username])
  @@map("Users")
}

model WorkoutPlan {
  id           String   @id @default(cuid()) @db.VarChar()
  name         String   @db.VarChar()
  description  String   @db.VarChar()
  authorId     String   @map("author_id") @db.VarChar()
  routineId    String   @map("routine_id") @db.VarChar()
  trainingDays String[] @map("training_days") @db.VarChar()
  progress     Json
  startDate    DateTime @default(now()) @map("start_date")
  endDate      DateTime @map("end_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  completed    Boolean  @default(false)

  // relations  
  author  User           @relation(fields: [authorId], references: [id])
  routine WorkoutRoutine @relation(fields: [routineId], references: [id])

  @@index([id, authorId])
  @@map("WorkoutPlans")
}

model WorkoutRoutine {
  id            String         @id @default(cuid()) @db.VarChar()
  name          String
  description   String
  routine       Json
  // duration in minutes of workout plan
  duration      Int
  owner         User?          @relation(fields: [userId], references: [id])
  primaryGoal   Goal?          @map("primary_goal")
  strengthLevel StrengthLevel? @map("strength_level")
  workoutType   WorkoutType?   @map("workout_type")
  routineFocus  RoutineFocus?  @map("routine_focus")
  WorkoutPlan   WorkoutPlan[]
  userId        String?        @db.VarChar()

  @@map("WorkoutRoutines")
}

model Notification {
  id        String   @id @default(cuid()) @db.VarChar()
  userId    String   @map("user_id") @db.VarChar()
  title     String   @db.VarChar()
  content   String   @db.Text()
  viewed    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // relations
  user User @relation(fields: [userId], references: [id])

  @@index([id, userId])
  @@map("Notifications")
}

// Forum
model Post {
  id        String   @id @default(cuid()) @db.VarChar()
  title     String   @db.VarChar()
  content   String   @db.Text()
  authorId  String   @map("author_id") @db.VarChar()
  slug      String   @unique @db.VarChar()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relations
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  Like     Like[]

  @@index([id, authorId])
  @@map("Posts")
}

model Comment {
  id        String   @id @default(cuid()) @db.VarChar()
  postId    String   @map("post_id") @db.VarChar()
  authorId  String   @map("author_id") @db.VarChar()
  comment   String   @db.VarChar()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relations
  post   Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([id, postId, authorId])
  @@map("Comments")
}

model Like {
  id       String @id @default(cuid()) @db.VarChar()
  postId   String @map("post_id") @db.VarChar()
  authorId String @map("author_id") @db.VarChar()

  createdAt DateTime @default(now()) @map("created_at")

  // relations
  post   Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("Likes")
}

enum Gender {
  male
  female
}

enum Role {
  user
  moderator
  admin
}

enum Goal {
  LOSE_FAT
  MAINTAIN_TONE
  BUILD_MUSCLE
}

enum WorkoutType {
  WEIGHTED
  BODY_WEIGHT
  NO_EQUIPMENT
}

enum RoutineFocus {
  AESTHETICS
  STRENGTH
}

enum StrengthLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
